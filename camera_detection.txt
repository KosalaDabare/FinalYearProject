import numpy as np
import os
import six.moves.urllib as urllib
import sys
import tarfile
import tensorflow as tf
import zipfile
from tkinter import *
from PIL import Image,ImageTk
from tkinter import ttk
from tkinter import filedialog

from collections import defaultdict
from io import StringIO
from matplotlib import pyplot as plt
from PIL import Image
from IPython.display import display

from object_detection.utils import ops as utils_ops
from object_detection.utils import label_map_util
from object_detection.utils import visualization_utils as vis_util

import pathlib

import serial
import time
from dataclasses import dataclass

@dataclass
class PortConfig:
    COMPORT: str = 'COM3'
    BAUDRATE: int = 9600
    TIMEOUT: int  = 10

class SerialComm:
    """ communication to serial comm port 3"""
    def __init__(self):
        self.comm = serial.Serial(PortConfig.COMPORT, PortConfig.BAUDRATE, timeout=PortConfig.TIMEOUT)
    def writer(self,string):
        self.comm.write(bytes(string,'utf-8'))
    def closeComm(self):
        self.comm.close()
    def openComm(self):
        self.comm.open()
    def readComm(self):
        return self.comm.readline()[:-2]
        # self.comm.read(size=8)

# patch tf1 into `utils.ops`
utils_ops.tf = tf.compat.v1

# Patch the location of gfile
tf.gfile = tf.io.gfile 

# List of the strings that is used to add correct label for each box.
PATH_TO_LABELS = 'object_detection\images\labelmap.pbtxt'
category_index = label_map_util.create_category_index_from_labelmap(PATH_TO_LABELS, use_display_name=True)

# If you want to test the code with your images, just add path to the images to the TEST_IMAGE_PATHS.
PATH_TO_TEST_IMAGES_DIR = pathlib.Path('object_detection/test_images')
TEST_IMAGE_PATHS = sorted(list(PATH_TO_TEST_IMAGES_DIR.glob("*.jpg")))
# TEST_IMAGE_PATHS

### change the location accordingly
detection_model = tf.saved_model.load('object_detection/inference_graph/saved_model')

def run_inference_for_single_image(model, image):
  image = np.asarray(image)
  # The input needs to be a tensor, convert it using `tf.convert_to_tensor`.
  input_tensor = tf.convert_to_tensor(image)
  # The model expects a batch of images, so add an axis with `tf.newaxis`.
  input_tensor = input_tensor[tf.newaxis,...]

  # Run inference
  model_fn = model.signatures['serving_default']
  output_dict = model_fn(input_tensor)
#   print(output_dict)
  # All outputs are batches tensors.
  # Convert to numpy arrays, and take index [0] to remove the batch dimension.
  # We're only interested in the first num_detections.
  num_detections = int(output_dict.pop('num_detections'))
  output_dict = {key:value[0, :num_detections].numpy() 
                 for key,value in output_dict.items()}
  output_dict['num_detections'] = num_detections

  # detection_classes should be ints.
  output_dict['detection_classes'] = output_dict['detection_classes'].astype(np.int64)
#   print(output_dict['detection_classes'])
  # Handle models with masks:
  if 'detection_masks' in output_dict:
    # Reframe the the bbox mask to the image size.
    detection_masks_reframed = utils_ops.reframe_box_masks_to_image_masks(
              output_dict['detection_masks'], output_dict['detection_boxes'],
               image.shape[0], image.shape[1])      
    detection_masks_reframed = tf.cast(detection_masks_reframed > 0.8,
                                       tf.uint8)
    output_dict['detection_masks_reframed'] = detection_masks_reframed.numpy()
    
  return output_dict

def show_inference(model, image_np):
    # the array based representation of the image will be used later in order to prepare the
    # result image with boxes and labels on it.
    #   image_np = np.array(Image.open(image_path))
    # Actual detection.
    output_dict = run_inference_for_single_image(model, image_np)

    #   print(category_index)
    # Visualization of the results of a detection.
    final_img, box, out_display_str =vis_util.visualize_boxes_and_labels_on_image_array(
            image_np,
            output_dict['detection_boxes'],
            output_dict['detection_classes'],
            output_dict['detection_scores'],
            category_index,
            instance_masks=output_dict.get('detection_masks_reframed', None),
            use_normalized_coordinates=True,
            line_thickness=8)
    return final_img, box, out_display_str
    #   display(Image.fromarray(image_np))

import cv2

def send_signal():
  pass

root = Tk()
root.title("Dolly")
root.geometry("700x640")
root.configure(bg="black")
Label(root,text="Yolk detection",font=("times new roman",30,"bold"),bg="black",fg="red").pack()
f1 = LabelFrame(root,bg="red")
f1.pack()
L1 = Label(f1,bg="red")
L1.pack()
orel = PhotoImage(file = 'C:\\Users\\Orange\\Pictures\\Saved Pictures\\download.png')
label = ttk.Label(root, image = orel)
PhotoImage(file = 'C:\\Users\\Orange\\Pictures\\Saved Pictures\\download.png')
label.pack()
cap = cv2.VideoCapture(0)
ard = SerialComm()
ard.closeComm()
detection = True
ard.openComm()
get_data = ""

while 1:
    
    _,img = cap.read()
    
    img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
    
    final_img, detection_boxes, out_display_str = show_inference(detection_model,img)
    print(out_display_str)
    if out_display_str == "Yolk bad" and detection == True:
      ard.writer("1")
      print("detected bad yolk")
      detection == False

    if detection == False:
      data = ard.readComm()
      print("data :",data)
      if data is not None:
        print("done detection", data)
        detection = True

    final_img = cv2.cvtColor(final_img,cv2.COLOR_RGB2BGR)
    
    cv2.imshow('img',final_img)

#     cv2.imshow('img',img)
    if cv2.waitKey(1) == ord('q'):
        break

cap.release()
root.mainloop()
cv2.destroyAllWindows()

